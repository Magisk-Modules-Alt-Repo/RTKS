#!/system/bin/sh
# veez21 @ xda-developers
# raidenkkj @ github

# Magisk Module ID **
ID="RTKS"

# Detect root
_name=$(basename "$0")
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d "$MODDIR" ] && { echo "[!] Raiden Tweaks missing..."; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. "$MODDIR"/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file

RLOG=/sdcard/.RTKS/raidenTweaks.log
MLOG=/sdcard/.RTKS/raidenTweaks-menu.log
oldMLOG=/sdcard/.RTKS/raidenTweaks-old.log
# > Verbose output goes here
VERLOG=/sdcard/.RTKS/raidenTweaks-menu-verbose.log
oldVERLOG=/sdcard/.RTKS/raidenTweaks-menu-verbose-old.log
stdoutLOG=$MODDIR/logs/raidenTweaks-menu-STDOUT.log
oldstdoutLOG=$MODDIR/logs/raidenTweaks-menu-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $MLOG $oldMLOG 2>/dev/null; mv -f "$stdoutLOG" "$oldstdoutLOG" 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

rtks_prof=$(getprop persist.raidentweaks.mode)
modpath="/data/adb/modules/RTKS/"

case "${rtks_prof}" in
1)
  rtks_prof=Automatic
  ;;
  
   2)
    rtks_prof=Battery
    ;;
    
     3)
      rtks_prof=Balanced
      ;;

       4)
        rtks_prof=Performance
        ;;

        5)
         rtks_prof=Gaming
         ;;
         
          6)
         rtks_prof=Thermal
         ;;
      esac

if [[ "$(getprop init.svc.thermal-engine)" == "running" ]]; then
    ts=On
elif [[ "$(getprop init.svc.thermal-engine)" == "stopped" ]]; then
      ts=Off
else
    ts=Unknown
fi

if [[ "$(grep_prop ro.config.low_ram ${modpath}system.prop)" == "true" ]]; then
    lr=Enabled
elif [[ "$(grep_prop ro.config.low_ram ${modpath}system.prop)" == "false" ]]; then
    lr=Disabled 
else
    lr=Unknown
fi

# Device SDK
sdk=$(getprop ro.build.version.sdk)
[[ "$sdk" == "" ]] && sdk=$(getprop ro.vendor.build.version.sdk)
[[ "$sdk" == "" ]] && sdk=$(getprop ro.vndk.version)

dev="raidenkk"

magisk=$(magisk -V)
[[ "$(settings get global low_power)" == "1" ]] && low_power_mode="Enabled" || low_power_mode="Disabled"

Menu() {
    echo -e '\n'
    printf "\033c"
    echo "${Y}|         Welcome to raidenTweaks menu         |${N}"
    echo "${Y}|  Created and written by $dev @ telegram  |${N}"
    echo ""
    echo "${Y}[*] Your device:${B} $(getprop ro.product.model) ${N}"
    echo ""
    echo "${Y}[*] Your current profile:${B} $rtks_prof ${N}"
    echo ""
    echo "${Y}[*] Version:${B} $(grep_prop version "$modpath"module.prop) - $(grep_prop codename "$modpath"module.prop) ${N}"
    echo ""
    echo "${Y}[*] Magisk version:${B} $magisk ${N}"
    echo ""
    echo "${Y}[*] Thermal state:${B} $ts ${N}"
    echo ""
    echo "${Y}[*] Low ram state:${B} $lr ${N}"
    echo ""
    echo "------------------------------------------------"
    echo "${C}[*] Profile selector ${N}"
    echo "------------------------------------------------"
    echo ""
    echo "${V}[1] Automatic: Focused on applying profiles in specific conditions. ${N}"
    echo ""
    echo "${B}[2] Battery: Focused on saving as much battery as possible.${N}"
    echo ""
    echo "${G}[3] Balanced: Focused on leaving the system balanced.${N}"
    echo ""
    echo "${Y}[4] Performance: Focused on maximizing your device's performance.${N}"
    echo ""
    echo "${R}[5] Gaming: Focused on improving your gaming/all performance.${N}"
    echo ""
    echo "${C}[6] Thermal: Focused on making your device heat free, cold.${N}"
    echo ""
    echo "------------------------------------------------"
    echo "${C}[*] Miscellaneous ${N}"
    echo "------------------------------------------------"
    echo ""
    if [[ "$ts" == "On" ]]; then
    echo "${Y}[7] Disable thermal-engine ${C}(This will disable the thermal-engine)${N}"
    echo ""
    elif [[ "$ts" == "Off" ]]; then
    echo "${Y}[7] Enable thermal-engine ${C}(This will enable the thermal-engine)${N}"
    echo ""
    fi
    echo "${Y}[8] Fstrim on some partitions ${C}This will fstrim specific partitions)${N}"
    echo ""
    echo "${Y}[9] Optimize application package ${C}(This will optimize the application packages)${N}"
    echo ""
    echo "${Y}[10] Clear RAM [ ${B}BASIC ${Y}] ${C}(This one will just drop all caches)${N}"
    echo ""
    echo "${Y}[11] Clear RAM [ ${B}HEAVY ${Y}] ${C}(This will drop cache and kill background apps)${N}"
    echo ""
    echo "${Y}[12] Clear RAM [ ${B}ADVANCED ${Y}] ${C}(This will drop cache and kill all apps)${N}"
    echo ""
    echo "${Y}[13] Clean up unnecessary files ${C}(I.e. system logs, debug logs, etc.)${N}"
    echo ""
    echo "${Y}[14] Clear battery status ${C}(This will clear old battery status)${N}"
    echo ""
    if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${Y}[15] Enable low power mode ${C}(This will enable maximum battery saver)${N}"
    echo ""
    elif [[ "$low_power_mode" == "Enabled" ]]; then
    echo "${Y}[15] Disable low power mode ${C}(This will disable maximum battery saver)${N}"
    echo ""
    fi
    [[ "$(pm list package com.google.android.gms)" ]] && {
    echo "${Y}[16] Enable Gapps ${C}(This will enable some of your gapps packages)${N}"
    echo ""
    echo "${Y}[17] Disable Gapps ${C}(This will disable some of your gapps packages)${N}"
    echo ""
    }
    if [[ "$lr" == "Enabled" ]]; then
    echo "${Y}[18] Disable low ram ${C}(This will disable low ram mode)${N}"
    echo ""
    elif [[ "$lr" == "Disabled" ]]; then
    echo "${Y}[18] Enable low ram ${C}(This will enable low ram mode)${N}"
    echo ""
    elif [[ "$lr" == "Unknown" ]]; then
    echo "${Y}[18] Enable low ram ${C}(This will enable low ram mode)${N}"
    echo ""
    fi
    echo "${Y}[19] Low memory killer menu ${C}(A secondary menu with lmk profiles)${N}"
    echo ""
    echo "${Y}[20] Unlocker menu ${C}(A tertiary menu with possibility to change unlockers)${N}"
    echo ""
    echo "${Y}[21] Telegram group ${C}(To answer your questions / report bugs)${N}"
    echo ""
    echo "${B}[A] About the module ${C}(Informations)${N}"
    echo ""
    echo "${B}[S] Send logs to developer ${C}(This will prepare the logs to be sent to dev)${N}"
    echo ""
    echo "${R}[U] Uninstall Raiden Tweaks ${C}(Will remove the module / files from your system)${N}"
    echo ""
    echo "${R}[0] Go out.${N}"
    echo -e '\n'
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Option1 ;; 
    2) Option2 ;;
    3) Option3 ;;
    4) Option4 ;;
    5) Option5 ;;
    6) Option6 ;;
    7) Option7 ;; 
    8) Option8 ;;
    9) Option9 ;;
    10) Option10 ;;
    11) Option11 ;;
    12) Option12 ;;
    13) Option13 ;;
    14) Option14 ;;
    15) Option15 ;;
    16) Option16 ;;
    17) Option17 ;;
    18) Option18 ;;
    19) Option19 ;;
    20) Option20 ;;
    21) Option21 ;;
    A) About ;;
    S) SendLogs ;;
    U) Uninstall ;;
    0) GoOut ;;
    *) Menu ;;
    esac
    }
    
Option1 () {
    printf "\033c"
    echo "${G}Putting the profile in automatic mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "1" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option1 ;;
    esac
}

Option2 () {
    printf "\033c"
    echo "${G}Putting the profile in battery mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "2" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option2  ;;
    esac
}

Option3 () {
    printf "\033c"
    echo "${G}Putting the profile in balanced mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "3" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option3 ;;
    esac
}

Option4 () {
    printf "\033c"
    echo "${G}Putting the profile in performance mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "4" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option4 ;;
    esac
}

Option5 () {
    printf "\033c"
    echo "${G}Putting the profile in gaming mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "5" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) "Unknown command, sorry." ; echo ; Option5 ;;
    esac
}

Option6 () {
    printf "\033c"
    echo "${G}Putting the profile in thermal mode...${N}"
    sleep 0.5
    echo ""
    setprop persist.raidentweaks.mode "6" 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    sleep 0.5
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option6 ;;
    esac
}

Option7 () {
    printf "\033c"
    if [[ "$ts" == "On" ]]; then
    echo "${G}Disabling thermal...${N}"
    echo ""
    echo "${R}Warning: Your device may get hot.${N}"
    echo "${R}This will not work on MIUI!${N}"
    sleep 0.5
    stop thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    elif [[ "$ts" == "Off" ]]; then
    echo "${G}Enabling thermal engine...${N}"
    sleep 0.5
    start thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    fi
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option7 ;;
    esac
}
    
Option8 () {
    printf "\033c"
    echo "${G}Fstrim initializing, please wait.${N}"
    rfstrim 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option8 ;;
    esac
}

Option9 () {
    printf "\033c"
    echo "${G}Optimizing application packages, please wait...${N}"
    sleep 0.5
    echo ""
    echo "${G}[!] This process takes time under certain circumstances.${N}"
    echo ""
    pm compile -a -f --compile-layouts
    cmd package bg-dexopt-job
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option9 ;;
    esac
}

Option10 () {

    su -lp 2000 -c "cmd notification post -S bigtext -t 'Clear ram basic is running successfully.' tag 'Execution in: $(date)'"
    printf "\033c"
    echo "${G}Dropping all caches, wait, it's very fast. ^^${N}"
    sleep 0.5
    sync
    echo "3" >"/proc/sys/vm/drop_caches"
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option10 ;;
    esac
}

Option11 () {
    su -lp 2000 -c "cmd notification post -S bigtext -t 'Clear ram heavy is running successfully.' tag 'Execution in: $(date)'"
    printf "\033c"
    echo "${G}Dropping caches and killing background processes, wait patiently... ^^${N}"
    sleep 0.5
    sync
    echo "3" >"/proc/sys/vm/drop_caches"
    am kill-all
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option11 ;;
    esac
}

Option12 () {
   su -lp 2000 -c "cmd notification post -S bigtext -t 'Clear ram advanced is running successfully.' tag 'Execution in: $(date)'"
    printf "\033c"
    echo "${G}Dropping all caches and killing all processes, wait there. ^^${N}"
    sleep 0.5
    sync
    echo "3" >"/proc/sys/vm/drop_caches"
    am kill-all
    sleep 2
	while IFS= read -r pkg_nm; do
		[[ "$pkg_nm" != "com.termux" ]] && [[ "$pkg_nm" != "jackpal.androidterm" ]] && [[ "$pkg_nm" != "yarolegovich.materialterminal" ]] && [[ "$pkg_nm" != "com.google.android.inputmethod.latin" ]] && [[ "$pkg_nm" != "com.termoneplus" ]] && [[ "$pkg_nm" != "com.pittvandewitt.viperfx" ]] && [[ "$pkg_nm" != "com.topjohnwu.magisk" ]] && [[ "$pkg_nm" != "ridmik.keyboard" ]] && [[ "$pkg_nm" != "com.maxmpz.equalizer" ]] && [[ "$pkg_nm" != "com.miui.screenrecorder" ]] && am force-stop "$pkg_nm"
	done <<<"$(pm list packages -e -3 | grep package | cut -f 2 -d ":")"
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option12 ;;
    esac
}

Option13 () {
    printf "\033c"
    echo "${G}Cleaning up useless residual files...${N}"
    sleep 1
    cleaner 2>/dev/null
    [[ $? == "0" ]] && echo "${G}Process finished!" || echo "${R}Something went wrong!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option13 ;;
    esac
}

Option14 () {
    printf "\033c"
    echo "${G}Clearing battery status, please wait.${N}"
    sleep 0.5
    rm -f /data/system/batterystats.bin
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option14 ;;
    esac
}

Option15 () {
	printf "\033c"
    if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${G}Enabling low power mode...${N}"
    sleep 0.5
    echo ""
    settings put global low_power 1 2>/dev/null
    settings put global low_power_sticky 1 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings put global forced_app_standby_enabled 1 2>/dev/null
    settings put global app_auto_restriction_enabled true 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 1 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    elif [[ "$low_power_mode" == "Enabled" ]]; then
    echo "${G}Disabling low power mode...${N}"
    sleep 0.5
    settings put global low_power 0 2>/dev/null
    settings reset global low_power 2>/dev/null
    settings put global low_power_sticky 0 2>/dev/null
    settings reset global low_power_sticky 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings reset global app_standby_enabled 2>/dev/null
    settings put global forced_app_standby_enabled 0 2>/dev/null
    settings reset global forced_app_standby_enabled 2>/dev/null
    settings put global app_auto_restriction_enabled false 2>/dev/null
    settings reset global app_auto_restriction_enabled 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 0 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    fi
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option15 ;;
    esac
}

Option16 () {
    printf "\033c"
    echo "${G}Enabling gapps, please wait...${N}"
    sleep 0.5
    pm enable com.google.android.gsf 2>/dev/null
    pm enable com.google.android.gsf.login 2>/dev/null
    pm enable com.google.android.gms 2>/dev/null
    pm enable com.google.android.ims 2>/dev/null 
    pm enable com.google.android.apps.carrier.log 2>/dev/null
    pm enable com.android.vending 2>/dev/null
    pm enable com.google.android.play.games 2>/dev/null
    pm enable com.google.android.syncadapters.contacts 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option16 ;;
    esac
}

Option17 () {
    printf "\033c"
    echo "${G}Disabling gapps, please wait...${N}"
    sleep 0.5
    pm disable com.google.android.gsf 2>/dev/null
    pm disable com.google.android.gsf.login 2>/dev/null
    pm disable com.google.android.gms 2>/dev/null
    pm disable com.google.android.ims 2>/dev/null
    pm disable com.google.android.apps.carrier.log 2>/dev/null
    pm disable com.android.vending 2>/dev/null
    pm disable com.google.android.play.games 2>/dev/null
    pm disable com.google.android.syncadapters.contacts 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option17 ;;
    esac
}

Option18 () {
    printf "\033c"
    if [[ "$lr" == "Enabled" ]]; then
    echo "${G}Disabling low ram.${N}"
    sleep 0.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=false/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
    elif [[ "$lr" == "Disabled" ]]; then
    echo "${G}Enabling low ram...${N}"
    echo "" 
    echo "${G}Features affected by the low-ram property:${N}"
    echo "${C}- Flat recent / multitasking UI, multi-users disabled${N}"
    sleep 0.8
    echo "${C}- High-end graphics disabled${N}"
    sleep 0.8
    echo "${C}- Less recent apps cache${N}"
    sleep 0.8
    echo "${C}- Multi-windows disabled${N}"
    sleep 0.8
    echo "${C}- Minor notification icons changes${N}"
    sleep 0.8
    echo "${C}- Less logger buffer sizes (devs)${N}"
    sleep 0.8
    echo "${C}- No apps notifications access / zen access / VR listeners / picture in picture (PIP) accesses.​${N}"
    sleep 1.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=true/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
    elif [[ "$lr" == "Unknown" ]]; then
    echo "${G}Enabling low ram...${N}"
    echo "" 
    echo "${G}Features affected by the low-ram property:${N}"
    echo "${C}- Flat recent / multitasking UI, multi-users disabled${N}"
    sleep 0.8
    echo "${C}- High-end graphics disabled${N}"
    sleep 0.8
    echo "${C}- Less recent apps cache${N}"
    sleep 0.8
    echo "${C}- Multi-windows disabled${N}"
    sleep 0.8
    echo "${C}- Minor notification icons changes${N}"
    sleep 0.8
    echo "${C}- Less logger buffer sizes (devs)${N}"
    sleep 0.8
    echo "${C}- No apps notifications access / zen access / VR listeners / picture in picture (PIP) accesses.​${N}"
    sleep 1.5
    sed -i '/ro.config.low_ram=/s/.*/ro.config.low_ram=true/' "${modpath}system.prop"
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${G}Reboot for the changes to take effect.${N}"
    echo ""
    fi
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) Option18 ;;
    esac
}

Option19 () {
    printf "\033c"
    echo "${G}Opening low memory killer menu...${N}"
    sleep 2
    lmkmenu
}

Option20 () {
    printf "\033c"
    echo "${G}Opening unlocker menu...${N}"
    sleep 2
    unlockermenu
}

Option21 () {
    printf "\033c"
    echo "${G}Access telegram group (support)${N}"
    sleep 2
    am start -a android.intent.action.VIEW -d https://t.me/raidenprjktsgroup
    rtksmenu
}

About () {
    printf "\033c"
    echo "${G}Module informations:${N}"
    echo "${C}This module is focused on your experience, that's right, with this module you can choose several profiles according to your taste.${N}"
    echo "${C}Enjoy your time with what you love to do, good luck!! Please give me feedback on my telegram :)${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    1) Return ;;
    0) GoOut ;;
    *) About ;;
    esac
}

SendLogs () {
    printf "\033c"
    upload_logs
    echo ""
    echo "${N}${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo "${B}[ T ] Open telegram group${N}"
    echo ""
    echo "${C}Select your option ${N}: \c"
    read option
    case $option in
    0) GoOut ;;
    T) Option20 ;;
    *) Menu ;;
    esac
}

Uninstall () {
    printf "\033c"
    echo "${G}Okay, i understand... uninstalling the Raiden Tweaks module...${N}"
    sleep 0.5
    echo ""
    rm -rf /data/adb/modules/RTKS
    rm -rf /storage/emulated/0/.RTKS
    rm -rf /data/local/RaidenTweaks.apk
    rm -rf /data/local/RDToast.apk
    if [ "$(pm list package org.rtks.raiden)" ]; then
    pm uninstall -k --user 0 org.rtks.raiden
    fi
    if [ "$(pm list package bellavita.toast)" ]; then
    pm uninstall -k --user 0 bellavita.toast
    fi
    echo "${G}Module uninstalled, now we will restart your device.${N}"
    sleep 1
    echo "${G}In a few seconds the device will restart.${N}"
    echo ""
    sleep 1.7
    # This progress bar is not a real process
    echo "${G} - Progress bar -"
    echo -ne "${B}[${W}==>             ${B}]   ${BGBL}[20%]\r"
    sleep 1.5
    echo -ne "${N}${B}[${W}=======>        ${B}]   ${BGBL}[40%]\r"
    sleep 1.6
    echo -ne "${N}${B}[${W}===========>    ${B}]   ${BGBL}[60%]\r"
    sleep 1.5
    echo -ne "${N}${B}[${W}==============> ${B}]   ${BGBL}[80%]\r"
    sleep 1.7
    echo -ne "${N}${B}[${W}===============>${B}]  ${BGBL}[100%]\r"
    echo -ne '\n'
    reboot system
}

Return() {
    printf "\033c"
    rtksmenu
    printf "\033c"
}

GoOut() {
    printf "\033c"
    echo ""
    echo "${B}Bye bye, see you next time.${N}"
    exit
}
printf "\033c"
Menu
